<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Manajemen Produk</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
</head>

<body class="bg-light">

  <div class="container py-4">
    <h1 class="mb-4 text-center">ðŸ“¦ Gudang Produk</h1>

    <div class="card p-3 mb-4">
      <h5 class="card-title">Tambah Item Order</h5>
      <div class="row g-2">
        <div class="col-md">
          <select id="produk" class="form-control" aria-placeholder="Pilih Produk">
            <option value="-1">Pilih Produk</option>
          </select>
        </div>
        <div class="col-md">
          <input type="number" id="jumlah" class="form-control" placeholder="Jumlah" min="1" value="" disabled>
        </div>
        <div class="col-md">
          <input type="text" id="harga" class="form-control" placeholder="Harga (Satuan)" value="" disabled>
        </div>
        <div class="col-md">
          <input type="text" id="subtotal" class="form-control" placeholder="Subtotal" value="" disabled>
        </div>
        <div class="col-auto">
          <button id="btnTambah" class="btn btn-primary" onclick="tambahProduk()">Tambah</button>
        </div>
      </div>
    </div>

    <h2 class="h4">Keranjang Order Saat Ini</h2>
    <table class="table table-bordered bg-white">
      <thead>
        <tr>
          <th>Produk</th>
          <th>Jumlah</th>
          <th>Harga (Satuan)</th>
          <th>Subtotal</th>
          <th>Aksi</th>
        </tr>
      </thead>
      <tbody id="produkList"></tbody>
      <tfoot>
        <tr>
          <th colspan="3" class="text-end">Total</th>
          <th id="totalAmount">0.00</th>
          <th></th>
        </tr>
      </tfoot>
    </table>
    <div class="text-end mt-3 mb-5">
      <button id="btnCommit" class="btn btn-success btn-lg">Commit Order ke Database</button>
    </div>

    <hr />

    <h2 class="mt-5 mb-4 text-center">Riwayat Transaksi</h2>
    <table class="table table-striped table-bordered bg-white">
      <thead>
        <tr>
          <th>Produk</th>
          <th>Jumlah</th>
          <th>Harga (Satuan)</th>
          <th>Subtotal</th>
        </tr>
      </thead>
      <tbody id="existingOrdersList">
      </tbody>
    </table>

  </div>

  <script>
    const SUPABASE_URL = "https://odoxrrzurpaftrlcutfq.supabase.co";
    const SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kb3hycnp1cnBhZnRybGN1dGZxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3NjYyNDcsImV4cCI6MjA3MzM0MjI0N30.q-3OoyT1NVxcGWjV4wetlMRvvDnw1ltT_CaO2lbICxY";

    const { createClient } = supabase;
    const db = createClient(SUPABASE_URL, SUPABASE_KEY);

    let produkData = [];
    let currentOrderItems = [];

    function escapeHTML(str) {
      if (typeof str !== 'string') return str;
      return str.replace(/[&<>'"]/g, tag => ({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        "'": '&#39;',
        '"': '&quot;'
      }[tag]));
    }

    function renderCurrentOrder() {
      const produkListBody = document.getElementById("produkList");
      const totalAmountDisplay = document.getElementById("totalAmount");
      produkListBody.innerHTML = "";
      let total = 0;

      currentOrderItems.forEach((item, index) => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${escapeHTML(item.nama)}</td>
            <td>${item.jumlah}</td>
            <td>${item.harga.toFixed(2)}</td>
            <td>${item.subtotal.toFixed(2)}</td>
            <td><button class="btn btn-danger btn-sm" onclick="hapusProduk(${index})">Hapus</button></td>
        `;
        produkListBody.appendChild(row);
        total += item.subtotal;
      });

      totalAmountDisplay.textContent = total.toFixed(2);
    }

    function hapusProduk(index) {
      currentOrderItems.splice(index, 1);
      renderCurrentOrder();
    }

    function tambahProduk() {
      const productSelect = document.getElementById("produk");
      const quantityInput = document.getElementById("jumlah");

      const productId = productSelect.value;
      const quantity = parseInt(quantityInput.value);

      if (productId === "-1" || !quantity || quantity <= 0) {
        Swal.fire("Input tidak valid", "Silakan pilih produk dan masukkan jumlah yang benar.", "warning");
        return;
      }

      const selectedProduct = produkData.find(p => p.id == productId);
      if (!selectedProduct) {
        Swal.fire("Error", "Produk tidak ditemukan.", "error");
        return;
      }

      currentOrderItems.push({
        id: selectedProduct.id,
        nama: selectedProduct.produk,
        jumlah: quantity,
        harga: selectedProduct.harga,
        subtotal: selectedProduct.harga * quantity
      });

      renderCurrentOrder();

      // Reset form
      productSelect.value = "-1";
      quantityInput.value = "";
      document.getElementById("harga").value = "";
      document.getElementById("subtotal").value = "";
      quantityInput.disabled = true;
    }

    async function commitOrder() {
      if (currentOrderItems.length === 0) {
        Swal.fire("Keranjang kosong", "Tidak ada produk untuk di-commit.", "info");
        return;
      }

      const { isConfirmed } = await Swal.fire({
        title: 'Konfirmasi Order',
        text: `Anda akan menyimpan ${currentOrderItems.length} item ke database. Lanjutkan?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Ya, Simpan!',
        cancelButtonText: 'Batal'
      });

      if (!isConfirmed) {
        return;
      }

      const itemsToInsert = currentOrderItems.map(item => ({
        produk_id: item.id,
        jumlah: item.jumlah
      }));

      const { error } = await db.from("transaksi").insert(itemsToInsert);

      if (error) {
        console.error("Error committing order:", error);
        Swal.fire("Gagal", `Terjadi kesalahan saat menyimpan order: ${error.message}`, "error");
      } else {
        Swal.fire("Berhasil!", "Order berhasil disimpan.", "success");
        currentOrderItems = [];
        renderCurrentOrder();
        await loadExistingOrders();
      }
    }

    async function loadExistingOrders() {
      const { data, error } = await db
        .from("transaksi")
        .select(`
            jumlah,
            produk ( produk, harga )
        `)
        .limit(50); // Batasi jumlah riwayat yang ditampilkan

      if (error) {
        console.error("Error loading existing orders:", error);
        Swal.fire('Gagal Memuat Riwayat', error.message, 'error');
        return;
      }

      const existingOrdersList = document.getElementById("existingOrdersList");
      existingOrdersList.innerHTML = "<!-- Data riwayat akan dimuat di sini -->"; // Clear placeholder

      if (data.length === 0) {
        existingOrdersList.innerHTML = '<tr><td colspan="4" class="text-center">Belum ada riwayat transaksi.</td></tr>';
        return;
      }

      data.forEach(order => {
        const row = document.createElement("tr");

        const product = order.produk;
        const productName = product ? product.produk : 'Produk tidak ditemukan';
        const productPrice = product ? product.harga : 0;
        const subtotal = order.jumlah * productPrice;

        row.innerHTML = `
            <td>${escapeHTML(productName)}</td>
            <td>${order.jumlah}</td>
            <td>${productPrice.toFixed(2)}</td>
            <td>${subtotal.toFixed(2)}</td>
        `;
        existingOrdersList.appendChild(row);
      });
    }

    async function loadProduk() {
      const { data, error } = await db.from("produk").select("*").order("produk", { ascending: true });
      if (error) {
        console.error("Error loading products:", error);
        Swal.fire('Gagal Memuat Produk', error.message, 'error');
        return;
      }

      produkData = data;

      let dropdown = document.getElementById("produk");
      dropdown.innerHTML = '<option value="-1">Pilih Produk</option>';

      data.forEach(produk => {
        let option = document.createElement("option");
        option.value = produk.id;
        option.textContent = escapeHTML(produk.produk);
        dropdown.appendChild(option);
      });

      let productSelect = document.getElementById("produk");
      let quantityInput = document.getElementById("jumlah");
      let priceDisplay = document.getElementById("harga");
      let subtotalDisplay = document.getElementById("subtotal");

      productSelect.addEventListener("change", () => {
        if (productSelect.value === "-1") {
          priceDisplay.value = "";
          subtotalDisplay.value = "";
          quantityInput.value = "";
          quantityInput.disabled = true;
          return;
        }
        let selectedProduct = produkData.find(p => p.id == productSelect.value);
        if (selectedProduct) {
          priceDisplay.value = selectedProduct.harga.toFixed(2);
          quantityInput.disabled = false;
          quantityInput.dispatchEvent(new Event('input'));
        }
      });

      quantityInput.addEventListener("input", () => {
        let selectedProduct = produkData.find(p => p.id == productSelect.value);
        let quantity = parseInt(quantityInput.value) || 0;
        if (selectedProduct) {
          subtotalDisplay.value = (selectedProduct.harga * quantity).toFixed(2);
        }
      });
    }

    document.addEventListener("DOMContentLoaded", () => {
      loadProduk();
      loadExistingOrders();

      document.getElementById("btnCommit").addEventListener("click", commitOrder);
    });
  </script>
</body>

</html>
